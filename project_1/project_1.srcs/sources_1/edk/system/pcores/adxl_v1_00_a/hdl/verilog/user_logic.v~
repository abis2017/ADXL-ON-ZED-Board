//org----------------------------------------------------------------------------
// user_logic.v - module
//----------------------------------------------------------------------------
//
// ***************************************************************************
// ** Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.            **
// **                                                                       **
// ** Xilinx, Inc.                                                          **
// ** XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS"         **
// ** AS A COURTESY TO YOU, SOLELY FOR USE IN DEVELOPING PROGRAMS AND       **
// ** SOLUTIONS FOR XILINX DEVICES.  BY PROVIDING THIS DESIGN, CODE,        **
// ** OR INFORMATION AS ONE POSSIBLE IMPLEMENTATION OF THIS FEATURE,        **
// ** APPLICATION OR STANDARD, XILINX IS MAKING NO REPRESENTATION           **
// ** THAT THIS IMPLEMENTATION IS FREE FROM ANY CLAIMS OF INFRINGEMENT,     **
// ** AND YOU ARE RESPONSIBLE FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE      **
// ** FOR YOUR IMPLEMENTATION.  XILINX EXPRESSLY DISCLAIMS ANY              **
// ** WARRANTY WHATSOEVER WITH RESPECT TO THE ADEQUACY OF THE               **
// ** IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OR        **
// ** REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE FROM CLAIMS OF       **
// ** INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS       **
// ** FOR A PARTICULAR PURPOSE.                                             **
// **                                                                       **
// ***************************************************************************
//
//----------------------------------------------------------------------------
// Filename:          user_logic.v
// Version:           1.00.a
// Description:       User logic module.
// Date:              Mon Nov  3 10:21:47 2014 (by Create and Import Peripheral Wizard)
// Verilog Standard:  Verilog-2001
//----------------------------------------------------------------------------
// Naming Conventions:
//   active low signals:                    "*_n"
//   clock signals:                         "clk", "clk_div#", "clk_#x"
//   reset signals:                         "rst", "rst_n"
//   generics:                              "C_*"
//   user defined types:                    "*_TYPE"
//   state machine next state:              "*_ns"
//   state machine current state:           "*_cs"
//   combinatorial signals:                 "*_com"
//   pipelined or register delay signals:   "*_d#"
//   counter signals:                       "*cnt*"
//   clock enable signals:                  "*_ce"
//   internal version of output port:       "*_i"
//   device pins:                           "*_pin"
//   ports:                                 "- Names begin with Uppercase"
//   processes:                             "*_PROCESS"
//   component instantiations:              "<ENTITY_>I_<#|FUNC>"
//----------------------------------------------------------------------------

`uselib lib=unisims_ver
`uselib lib=proc_common_v3_00_a

module user_logic
(
  // -- ADD USER PORTS BELOW THIS LINE ---------------
  // --USER ports added here 
  clk,
  rst,
  MISO,
  MOSI,
  SCK,
  CS,
  // -- ADD USER PORTS ABOVE THIS LINE ---------------

  // -- DO NOT EDIT BELOW THIS LINE ------------------
  // -- Bus protocol ports, do not add to or delete 
  Bus2IP_Clk,                     // Bus to IP clock
  Bus2IP_Resetn,                  // Bus to IP reset
  Bus2IP_Data,                    // Bus to IP data bus
  Bus2IP_BE,                      // Bus to IP byte enables
  Bus2IP_RdCE,                    // Bus to IP read chip enable
  Bus2IP_WrCE,                    // Bus to IP write chip enable
  IP2Bus_Data,                    // IP to Bus data bus
  IP2Bus_RdAck,                   // IP to Bus read transfer acknowledgement
  IP2Bus_WrAck,                   // IP to Bus write transfer acknowledgement
  IP2Bus_Error                    // IP to Bus error response
  // -- DO NOT EDIT ABOVE THIS LINE ------------------
); // user_logic

// -- ADD USER PARAMETERS BELOW THIS LINE ------------
// --USER parameters added here 
	
	//Main States
	parameter [3:0] idle=4'h0;
	parameter [3:0] configure=4'h1;
	parameter [3:0] read_t=4'h3;
	parameter [3:0] wait4=4'h2;
	parameter [3:0] read_id=4'h6;
	
	//Config States
	parameter [3:0] r_rst=4'h0;
	parameter [3:0] wait1=4'h1;
	parameter [3:0] r_rst_d=4'h3;
 	parameter [3:0] r_pow=4'h2;
	parameter [3:0] wait2=4'h6;
	parameter [3:0] r_pow_d=4'h7;
 	parameter [3:0] r_flt=4'h5;
	parameter [3:0] wait3=4'h4;
	parameter [3:0] r_flt_d=4'hC;	
	
	parameter [15:0] RESET=16'h0A1F;
	parameter [7:0] RESET_D=8'h52;
	
	parameter [15:0] POW_CTL=16'h0A2D;
	parameter [7:0] POW_CTL_D=8'h02;
	
	parameter [15:0] FILTER_CTL=16'h0A2C;
	parameter [7:0] FILTER_CTL_D=8'h01;

// -- ADD USER PARAMETERS ABOVE THIS LINE ------------

// -- DO NOT EDIT BELOW THIS LINE --------------------
// -- Bus protocol parameters, do not add to or delete
parameter C_NUM_REG                      = 3;
parameter C_SLV_DWIDTH                   = 32;
// -- DO NOT EDIT ABOVE THIS LINE --------------------

// -- ADD USER PORTS BELOW THIS LINE -----------------
// --USER ports added here 

input 									clk;
input 									rst;
input 									MISO;
output reg 								CS;
output 									SCK;
output reg 								MOSI;
// -- ADD USER PORTS ABOVE THIS LINE -----------------

// -- DO NOT EDIT BELOW THIS LINE --------------------
// -- Bus protocol ports, do not add to or delete
input                                     Bus2IP_Clk;
input                                     Bus2IP_Resetn;
input      [C_SLV_DWIDTH-1 : 0]           Bus2IP_Data;
input      [C_SLV_DWIDTH/8-1 : 0]         Bus2IP_BE;
input      [C_NUM_REG-1 : 0]              Bus2IP_RdCE;
input      [C_NUM_REG-1 : 0]              Bus2IP_WrCE;
output     [C_SLV_DWIDTH-1 : 0]           IP2Bus_Data;
output                                    IP2Bus_RdAck;
output                                    IP2Bus_WrAck;
output                                    IP2Bus_Error;
// -- DO NOT EDIT ABOVE THIS LINE --------------------

//----------------------------------------------------------------------------
// Implementation
//----------------------------------------------------------------------------

  // --USER nets declarations added here, as needed for user logic

  	reg [15:0] TEST=16'h0B00;
	reg [5:0] clkcount=50;

	reg clk_out;
	
	reg [3:0] state;
	reg [3:0] config_st;
	reg done;
	reg [4:0] cnt;
	reg [7:0] dout;
	reg start;

  // Nets for user logic slave model s/w accessible register example
  reg        [C_SLV_DWIDTH-1 : 0]           slv_reg0;
  reg        [C_SLV_DWIDTH-1 : 0]           slv_reg1;
  reg        [C_SLV_DWIDTH-1 : 0]           slv_reg2;
  wire       [2 : 0]                        slv_reg_write_sel;
  wire       [2 : 0]                        slv_reg_read_sel;
  reg        [C_SLV_DWIDTH-1 : 0]           slv_ip2bus_data;
  wire                                      slv_read_ack;
  wire                                      slv_write_ack;
  integer                                   byte_index, bit_index;

  // USER logic implementation added here

  // ------------------------------------------------------
  // Example code to read/write user logic slave model s/w accessible registers
  // 
  // Note:
  // The example code presented here is to show you one way of reading/writing
  // software accessible registers implemented in the user logic slave model.
  // Each bit of the Bus2IP_WrCE/Bus2IP_RdCE signals is configured to correspond
  // to one software accessible register by the top level template. For example,
  // if you have four 32 bit software accessible registers in the user logic,
  // you are basically operating on the following memory mapped registers:
  // 
  //    Bus2IP_WrCE/Bus2IP_RdCE   Memory Mapped Register
  //                     "1000"   C_BASEADDR + 0x0
  //                     "0100"   C_BASEADDR + 0x4
  //                     "0010"   C_BASEADDR + 0x8
  //                     "0001"   C_BASEADDR + 0xC
  // 
  // ------------------------------------------------------

  assign
    slv_reg_write_sel = Bus2IP_WrCE[2:0],
    slv_reg_read_sel  = Bus2IP_RdCE[2:0],
    slv_write_ack     = Bus2IP_WrCE[0] || Bus2IP_WrCE[1] || Bus2IP_WrCE[2],
    slv_read_ack      = Bus2IP_RdCE[0] || Bus2IP_RdCE[1] || Bus2IP_RdCE[2];

  assign SCK=(clk_out&start&~CS);


 //Clock Divider
  initial begin
	clk_out<=1'b1;
	clkcount=6'd50;
	MOSI<=1'b0;
	CS<=1'b1;
	state<=idle;
	config_st<=r_rst;
	done<=1'b0;
	cnt<=5'd23;
	end

	always@(posedge clk) begin
		if(rst==1'b1) begin
			clk_out<=1'b0;
			clkcount<=6'd50;
		end
		else begin
			if(clkcount==0) begin
				clk_out<=~clk_out;
				clkcount<=6'd50;
			end
			else begin
				clkcount<=clkcount-2'b01;
			end
		end
	end

/*THE SPI CODE*/

always @(negedge clk_out or posedge rst) begin
		if(rst==1'b1) begin
		MOSI<=1'b0;
		CS<=1'b1;
		state<=idle;
		config_st<=r_rst;
		done<=1'b0;
		cnt<=5'd15;
		end

		else begin
			TEST[7:0]<=slv_reg1[7:0];
			case (state)
				idle:begin //idle
					if(done==1'b1 && start==1'b1)begin
						state<=read_t;
						
					end
					else if(done==1'b0 && start==1'b1)begin
						state<=configure;
						config_st<=r_rst;
						cnt<=5'd15;
						dout<=8'hFF;
					end
					
					else begin
						state<=idle;
						cnt<=5'd15;
					end
				end
				
				configure:begin
					case(config_st)
						r_rst:begin
							CS<=1'b0;
							MOSI<=RESET[cnt];
							if(cnt==0)begin
								config_st<=wait1;
								cnt<=5'd7;
							end
							else begin
								cnt<=cnt-1'b1;
							end
						end
						wait1:begin
							config_st<=r_rst_d;
						end
						
						r_rst_d:begin
							MOSI<=RESET_D[cnt];
							if(cnt==0)begin
								config_st<=r_pow;
								cnt<=5'd15;
								CS<=1'b1;
							end
							else begin
								cnt<=cnt-1'b1;
							end
							
						end
						
						r_pow:begin
							CS<=1'b0;
							MOSI<=POW_CTL[cnt];
							if(cnt==0)begin
								config_st<=wait2;
								cnt<=5'd7;
							end
							else begin
								cnt<=cnt-1'b1;
							end
						end
						wait2:begin
							config_st<=r_pow_d;
						end
						
						r_pow_d:begin
							MOSI<=POW_CTL_D[cnt];
							if(cnt==0)begin
								state<=idle;
								cnt<=5'd15;
								CS<=1'b1;
								done<=1'b1;
							end
							else begin
								cnt<=cnt-1'b1;
							end
						end
					endcase
					end
				read_t:begin
				CS<=1'b0;
					MOSI<=TEST[cnt];
					if(cnt==0)begin
						state<=wait3;
						cnt<=5'd7;
					end
					else begin
						cnt<=cnt-1'b1;
					end	
				end
				wait3:begin
					state<=read_id;
				end
				read_id:begin
					dout[cnt]<=MISO;
					if(cnt==0)begin
						state<=read_t;
						cnt<=5'd15;
						CS<=1'b1;
					end
					else begin
						cnt<=cnt-1'b1;
					end	
				end
				
			endcase
			//end
		end
	end
/****************************************************************************************/

  // implement slave model register(s)
  always @( posedge Bus2IP_Clk )
    begin

      if ( Bus2IP_Resetn == 1'b0 )
        begin
          slv_reg0 <= 0;
          slv_reg1 <= 0;
          slv_reg2 <= 0;
        end
      else begin
		if(slv_reg0>=1'b1) begin
			start<=1'b1;
		end
		else begin
			start<=1'b0;
		end

        case ( slv_reg_write_sel )
          3'b100 :
            for ( byte_index = 0; byte_index <= (C_SLV_DWIDTH/8)-1; byte_index = byte_index+1 )
              if ( Bus2IP_BE[byte_index] == 1 )
                slv_reg0[(byte_index*8) +: 8] <= Bus2IP_Data[(byte_index*8) +: 8];
          3'b010 :
            for ( byte_index = 0; byte_index <= (C_SLV_DWIDTH/8)-1; byte_index = byte_index+1 )
              if ( Bus2IP_BE[byte_index] == 1 )
                slv_reg1[(byte_index*8) +: 8] <= Bus2IP_Data[(byte_index*8) +: 8];
          3'b001 :
            for ( byte_index = 0; byte_index <= (C_SLV_DWIDTH/8)-1; byte_index = byte_index+1 )
              if ( Bus2IP_BE[byte_index] == 1 )
                slv_reg2[(byte_index*8) +: 8] <= Bus2IP_Data[(byte_index*8) +: 8];
          default : begin
            slv_reg0 <= slv_reg0;
            slv_reg1 <= slv_reg1;
            slv_reg2 <= slv_reg2;
                    end
        endcase
		slv_reg2[31:8]<=24'd0;
		slv_reg2[7:0]<=dout[7:0];
		end
    end // SLAVE_REG_WRITE_PROC

  // implement slave model register read mux
  always @( slv_reg_read_sel or slv_reg0 or slv_reg1 or slv_reg2 )
    begin 

      case ( slv_reg_read_sel )
        3'b100 : slv_ip2bus_data <= slv_reg0;
        3'b010 : slv_ip2bus_data <= slv_reg1;
        3'b001 : slv_ip2bus_data <= slv_reg2;
        default : slv_ip2bus_data <= 0;
      endcase

    end // SLAVE_REG_READ_PROC

  // ------------------------------------------------------------
  // Example code to drive IP to Bus signals
  // ------------------------------------------------------------

assign IP2Bus_Data = (slv_read_ack == 1'b1) ? slv_ip2bus_data :  0 ;
  assign IP2Bus_WrAck = slv_write_ack;
  assign IP2Bus_RdAck = slv_read_ack;
  assign IP2Bus_Error = 0;

endmodule
